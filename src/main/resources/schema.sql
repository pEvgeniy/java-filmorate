DROP ALL OBJECTS;

CREATE TABLE IF NOT EXISTS mpa_type (
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name   VARCHAR(127)
);

CREATE TABLE IF NOT EXISTS films (
     film_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
     name          VARCHAR(255) NOT NULL,
     description   VARCHAR(255) NOT NULL,
     release_date  DATE         NOT NULL,
     duration      INTEGER      NOT NULL,
     mpa_id        INTEGER REFERENCES mpa_type(mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS genres_to_films (
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id  INTEGER NOT NULL REFERENCES films(film_id) ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genres(genre_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login    VARCHAR(255) NOT NULL,
    name     VARCHAR(255),
    email    VARCHAR(255) NOT NULL,
    birthday DATE         NOT NULL,
    CONSTRAINT user_email_uindex UNIQUE (email),
    CONSTRAINT user_login_uindex UNIQUE (login)
);

CREATE TABLE IF NOT EXISTS likes (
    like_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id  INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friends (
    friendship_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       INTEGER REFERENCES users(user_id),
    friend_id     INTEGER REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS friends_statuses (
    friendship_status_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    friendship_id         INTEGER REFERENCES friends(friendship_id) ON DELETE CASCADE,
    friendship_status     VARCHAR(255) NOT NULL
);